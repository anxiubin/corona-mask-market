{"version":3,"sources":["DataContext.js","components/LocalInfections.js","components/Home.js","components/TimeSale.js","components/OfficialSale.js","App.js","index.js"],"names":["dotenv","config","cities","id","idKR","num","getCovid19Data","city","axios","method","url","headers","process","DataStateContext","createContext","LocalDataStateContext","DataProvider","children","useState","certified","undefined","dead","deisolated","updateTime","state","setState","local","setLocal","useEffect","then","response","data","status","code","dateString","Date","announced_timestamp","toLocaleString","year","month","day","console","log","catch","e","error","dataInterval","setInterval","clearInterval","forEach","i","produce","draft","Provider","value","LocalInfections","localData","useContext","Error","useLocalDataState","map","className","key","Home","useDataState","trueNum","setTrueNum","deadNum","setDeadNum","falseNum","setFalseNum","diff","runCounter","setTimeout","Math","ceil","clearTimeout","interval","TimeSale","mima","date","setDate","timer","setTimer","dday","distance","hours","floor","minutes","seconds","getTime","title","OfficialSale","window","kakao","lat","lng","location","setLocation","setMap","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","mapContainer","document","getElementById","mapOption","center","maps","LatLng","level","mapNew","Map","moveLatLng","panTo","zoomControl","ZoomControl","addControl","ControlPosition","RIGHT","mounted","useRef","current","event","addListener","getLevel","setLevel","latlng","getCenter","getLat","getLng","getShops","a","get","shops","count","stores","store","created_at","name","remain_stat","stock_at","content","createElement","classList","add","stockColor","stockText","style","backgroundColor","innerHTML","CustomOverlay","printShops","Fragment","App","to","alt","src","path","exact","component","RandomSale","CheerKR","ReactDOM","render"],"mappings":"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","file":"static/js/main.02dc5de7.chunk.js","sourcesContent":["import React, { createContext , useContext } from 'react';\r\nimport axios from 'axios';\r\nimport dotenv from 'dotenv';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport produce from 'immer';\r\n\r\ndotenv.config();\r\n\r\nconst COVID_APIKEY = process.env.REACT_APP_COVID19_API_KEY;\r\n\r\nconst cities = [\r\n    {\r\n        id: 'seoul',\r\n        idKR: '서울',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'gyeonggi',\r\n        idKR: '경기',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'incheon',\r\n        idKR: '인천',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'gangwon',\r\n        idKR: '강원',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'chungnam',\r\n        idKR: '충남',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'chungbuk',\r\n        idKR: '충북',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'sejong',\r\n        idKR: '세종',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'daejeon',\r\n        idKR: '대전',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'jeonbuk',\r\n        idKR: '전북',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'jeonnam',\r\n        idKR: '전남',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'gwangju',\r\n        idKR: '광주',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'gyeongbuk',\r\n        idKR: '경북',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'gyeongnam',\r\n        idKR: '경남',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'daegu',\r\n        idKR: '대구',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'ulsan',\r\n        idKR: '울산',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'busan',\r\n        idKR: '부산',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'jeju',\r\n        idKR: '제주',\r\n        num: 0,\r\n    },\r\n    {\r\n        id: 'quarantine',\r\n        idKR: '검역',\r\n        num: 0,\r\n    },\r\n];\r\n\r\nconst getCovid19Data = (city) => {\r\n    return axios({\r\n        method: \"GET\",\r\n        url: `https://cors-anywhere.herokuapp.com/https://api.dropper.tech/covid19/status/korea?locale=${city}`,\r\n        //CORS 이슈 프록시 서버를 통해 해결\r\n        headers: {\r\n            'APIKey': COVID_APIKEY,\r\n        },\r\n    });    \r\n};\r\n\r\nconst DataStateContext = createContext(null);\r\nconst LocalDataStateContext = createContext(null);\r\n\r\n//context API provider사용할 수 있는 컴포넌트 \r\nexport function DataProvider({children}){\r\n\r\n    const [state, setState] = useState({\r\n        certified: undefined,\r\n        dead: undefined,\r\n        deisolated: undefined,\r\n        updateTime: undefined,\r\n    });\r\n\r\n    const [local, setLocal] = useState(cities);\r\n\r\n    //전국 확진자\r\n    useEffect(() => {\r\n        if(state.certified === undefined) {\r\n            getCovid19Data('synthesize').then(response => {\r\n                if(response.data.status.code === 200) {\r\n                    const updateTime = new Date(response.data.data[0].announced_timestamp * 1000);\r\n                    const dateString = updateTime.toLocaleString('ko-KR', {\r\n                        year: 'numeric',\r\n                        month: 'long',\r\n                        day: 'numeric'\r\n                    });\r\n\r\n                    console.log('result', response.data);\r\n                    console.log('time', dateString );\r\n\r\n                    setState({\r\n                        ...state,\r\n                        certified: response.data.data[0].certified,\r\n                        dead: response.data.data[0].dead,\r\n                        deisolated: response.data.data[0].deisolated,\r\n                        updateTime: dateString,\r\n                    });\r\n                } else {\r\n                    console.log('There is an error');\r\n                }\r\n            }).catch(e => console.error(e));\r\n        }\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        //마운트 된 이후 6시간 단위 업데이트\r\n        const dataInterval = setInterval(() => {\r\n            getCovid19Data().then(response => {\r\n                if(response.data.status.code === 200) {\r\n                    console.log('result2', response.data.data[0]);\r\n                    setState({\r\n                        ...state,\r\n                        certified: response.data.data[0].certified,\r\n                        dead: response.data.data[0].dead,\r\n                        deisolated: response.data.data[0].deisolated,\r\n                    });\r\n                } else {\r\n                    console.log('There is an error');\r\n                }\r\n            }).catch(e => console.error(e));\r\n        }, 21600000);\r\n\r\n        return () => clearInterval(dataInterval);\r\n    },[]);\r\n\r\n\r\n    //도시 별 확진자\r\n    useEffect(() => {\r\n        if(local[0].num === 0) {\r\n            local.forEach((city, i) => {\r\n                getCovid19Data(city.id).then(response => {    \r\n                    if(response.data.status.code === 200) {\r\n                        setLocal(\r\n                            produce(draft => {\r\n                                draft[i].num = response.data.data[0].certified;\r\n                            })\r\n                        ); //Immer 사용\r\n                    } else {\r\n                        console.log('There is an error');\r\n                    }\r\n                }).catch(e => console.error(e));\r\n            })               \r\n        }\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        //마운트 된 이후 6시간 단위 업데이트\r\n        const dataInterval = setInterval(() => {\r\n            local.forEach((city, i) => {\r\n                getCovid19Data(city.id).then(response => {    \r\n                    if(response.data.status.code === 200) {\r\n                        setLocal(\r\n                            produce(draft => {\r\n                                draft[i].num = response.data.data[0].certified;\r\n                            })\r\n                        ); //Immer 사용\r\n                    } else {\r\n                        console.log('There is an error');\r\n                    }\r\n                }).catch(e => console.error(e));\r\n            }) \r\n        }, 21600000);\r\n            \r\n        return () => clearInterval(dataInterval);\r\n    },[]);\r\n\r\n    return (\r\n        <DataStateContext.Provider value={state}>\r\n            <LocalDataStateContext.Provider value={local}>\r\n                {children}\r\n            </LocalDataStateContext.Provider>\r\n        </DataStateContext.Provider>\r\n    );\r\n}\r\n\r\n//custom HOOK\r\nexport function useDataState() {\r\n    const context = useContext(DataStateContext);\r\n    if(!context) {\r\n      throw new Error('Cannot find DataStateContext')\r\n    }\r\n      return useContext(DataStateContext);\r\n  }\r\n\r\nexport function useLocalDataState() {\r\n    const context = useContext(LocalDataStateContext);\r\n    if(!context) {\r\n      throw new Error('Cannot find LocalDataStateContext')\r\n    }\r\n      return useContext(LocalDataStateContext);\r\n  }\r\n","import React from 'react';\r\nimport { useLocalDataState } from '../DataContext';\r\n\r\nfunction LocalInfections() {\r\n\r\n    const localData = useLocalDataState();\r\n\r\n    return (\r\n        <>\r\n        {localData.map((city) => (\r\n            <div className={`city-common ${city.id}`} key={city.id}>\r\n                <div className=\"cityname\">{city.idKR}</div>\r\n                <div className=\"num\">{city.num}</div>\r\n            </div>\r\n        ))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LocalInfections;","import React, {useState, useEffect} from 'react';\r\nimport LocalInfections from './LocalInfections';\r\nimport { useDataState } from '../DataContext';\r\n\r\nfunction Home() {\r\n\r\n    const data = useDataState();\r\n \r\n    const [trueNum, setTrueNum] = useState(0);\r\n    const [deadNum, setDeadNum] = useState(0);\r\n    const [falseNum, setFalseNum] = useState(0);\r\n\r\n    useEffect(() => {\r\n        let diff;\r\n        const counter = () => {\r\n            diff = data.certified - trueNum;\r\n\r\n        if(diff > 0) {\r\n            setTrueNum(trueNum => trueNum + Math.ceil(diff / 5));\r\n            }\r\n        }\r\n\r\n        let runCounter;\r\n\r\n        if(trueNum < data.certified) {\r\n            runCounter = setTimeout(() => {\r\n                counter();\r\n            }, 10);\r\n        }\r\n        return () => clearTimeout(runCounter);\r\n    }, [trueNum, data]);\r\n\r\n    //count up for infectionDead\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if(deadNum < data.dead) {\r\n                setDeadNum(num => num + 1);\r\n            }\r\n        }, 1);\r\n        return () => clearInterval(interval);\r\n    }, [deadNum, data]);\r\n\r\n    //count up for infectionFalse\r\n    useEffect(() => {\r\n        let diff;\r\n        const counter = () => {\r\n            diff = data.deisolated - falseNum;\r\n\r\n        if(diff > 0) {\r\n            setFalseNum(falseNum => falseNum + Math.ceil(diff / 5));\r\n            }\r\n        }\r\n\r\n        let runCounter;\r\n\r\n        if(falseNum < data.deisolated) {\r\n            runCounter = setTimeout(() => {\r\n                counter();\r\n            }, 10);\r\n        }\r\n        return () => clearTimeout(runCounter);\r\n    }, [falseNum, data]);\r\n \r\n    return (\r\n        <div>\r\n            <section>\r\n            <div className=\"home-img-section\">\r\n                <h1>\r\n                    #코로나 마스크 마켓\r\n                </h1>\r\n            </div>\r\n            </section>\r\n            <section className=\"infection-wrap\">\r\n                <div>\r\n                    <div className=\"updatetime\">\r\n                        {data.updateTime} 기준\r\n                    </div>\r\n                    <div className=\"infection-data\">\r\n                        <div className=\"infection-true\">\r\n                            확진\r\n                            <div className=\"infection-true-num\">\r\n                                {trueNum}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"infection-dead\">\r\n                            사망\r\n                            <div className=\"infection-dead-num\">\r\n                                {deadNum}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"infection-false\">\r\n                            격리해제\r\n                            <div className=\"infection-false-num\">\r\n                                {falseNum}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"map\">\r\n                    <LocalInfections />\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\r\nimport { MdTimer } from \"react-icons/md\";\r\n\r\nfunction TimeSale() {\r\n\r\n\r\n//추후 크롤링해서 데이터 가져온 것 state로 관리 (컨텍스트API 활용)\r\n  const mima = {\r\n      price : 14900,\r\n      name : '마마스크 미마 미세먼지 황사 보건용마스크 10개입(KF94)',\r\n      time : 9,\r\n      date : '2020-03-07:13:58:00+0900'\r\n  }\r\n\r\n  let itemText = '판매시작'\r\n\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const [timer, setTimer] = useState('');\r\n\r\n  function getTime() {\r\n    const dday = new Date(mima.date);\r\n    setDate(new Date())\r\n    const distance = dday - date;\r\n    const hours = Math.floor(\r\n      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n    );\r\n    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n    setTimer(`${\r\n        hours < 10 ? `0${hours}` : hours\r\n      }h ${minutes < 10 ? `0${minutes}` : minutes}m ${\r\n        seconds < 10 ? `0${seconds}` : seconds\r\n      }s`)\r\n  }\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n        if(timer === '00h 00m 00s') {\r\n            clearInterval(interval);\r\n          } else if(timer[1] === '-') {\r\n            clearInterval(interval);\r\n          } else {\r\n              getTime()\r\n              console.log(timer[1])\r\n            }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [date, timer]);\r\n\r\n  \r\n  //useEffect & setTimeout 으로 판매시작으로 바뀐 태그의 스타일이랑 itemtext 바꾸는 로직 짜기\r\n\r\n  //리렌더링했을때 타이머 오류 고치는 로직 짜기\r\n\r\n\r\n  return (\r\n    <div>\r\n        <section>\r\n            <div className=\"timesale-section\">\r\n            <h1>\r\n                #타임세일\r\n                </h1>\r\n\r\n            <h3 className=\"timesale-section-text\">\r\n                특정 시간에 맞춰 마스크를 구매해보세요!\r\n                </h3>\r\n            </div>\r\n        </section>\r\n        <section className=\"mask-section\">\r\n\r\n            {/* 마스크 리스트 배열에 담아서 관리 후 map으로 돌아가며 아이템 생성*/}\r\n            <div className=\"mask-wrap\">\r\n                <div className=\"mask-img\" title =\"mask\"></div>\r\n                <div className=\"item-details\">\r\n                    <h3 className=\"item-price\">\r\n                        {mima.price}원 \r\n                    </h3>\r\n                    <h3 className=\"item-name\">\r\n                        {mima.name}\r\n                    </h3>\r\n                    <h4 className=\"item-time\">\r\n                        판매 예정 시간 : {mima.time < 12 ? `오전 ${mima.time}시` : `오후 ${mima.time}시`}\r\n                    </h4>\r\n                </div>\r\n            </div>\r\n\r\n            {timer !== '00h 00m 00s' ? \r\n            <h2 className=\"item-timer\">\r\n                <MdTimer /> {timer}\r\n            </h2> :\r\n            <h2 className=\"item-selling\">\r\n                {itemText}\r\n            </h2>\r\n            }\r\n\r\n                 \r\n        </section>\r\n    </div>\r\n  );\r\n}\r\nexport default TimeSale;\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction OfficialSale() {\r\n\r\n    const [kakao] = useState(window.kakao);\r\n    const [location, setLocation] = useState({ //useReducer 사용\r\n        lat: null,\r\n        lng: null,\r\n    })\r\n    \r\n    const { lat, lng } = location;\r\n    const [map, setMap] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if(!lat && !lng) {\r\n            //내 위치 불러오기\r\n            const getLocation = (calback) => {\r\n                if (navigator.geolocation) {\r\n                    navigator.geolocation.getCurrentPosition(\r\n                        position => {\r\n                            const { coords } = position\r\n                            const { latitude, longitude } = coords\r\n                            setLocation({\r\n                                ...location,\r\n                                lat: latitude,\r\n                                lng: longitude\r\n                            })\r\n                        },\r\n                        () => {\r\n                            console.log(\"내 위치를 불러올 수 없습니다.\")\r\n                        }\r\n                    )\r\n                } else {\r\n                    console.log(\"위치를 불러올 수 없습니다.\")\r\n                }\r\n            }\r\n            getLocation();\r\n        }\r\n\r\n        if(!(!!map) && lat && lng) {\r\n            const mapContainer = document.getElementById('kakao-map'),\r\n            mapOption = {\r\n                center: new kakao.maps.LatLng(lat, lng),\r\n                level: 3,\r\n            };\r\n\r\n            // var map = new kakao.maps.Map(mapContainer, mapOption);\r\n            const mapNew = new kakao.maps.Map(mapContainer, mapOption);\r\n\r\n            const moveLatLng = new kakao.maps.LatLng(lat, lng);\r\n            mapNew.panTo(moveLatLng);\r\n\r\n            const zoomControl = new kakao.maps.ZoomControl();\r\n            mapNew.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n            setMap(mapNew);\r\n        }\r\n\r\n    }, [lat, lng, map])\r\n\r\n    const mounted = useRef(false);\r\n\r\n    //마우스 드래그로 지도 이동할 때\r\n    useEffect(() => {\r\n\r\n        if(!mounted.current) {\r\n            mounted.current = true;\r\n        } else {\r\n            kakao.maps.event.addListener(map, 'dragend', function() {      \r\n                var level = map.getLevel();\r\n                console.log(level);\r\n                map.setLevel(level); \r\n\r\n                var latlng = map.getCenter(); \r\n\r\n                setLocation({\r\n                    ...location,\r\n                    lat: latlng.getLat(),\r\n                    lng: latlng.getLng()\r\n                })\r\n\r\n            });\r\n\r\n            setMap(map);\r\n    \r\n        }\r\n\r\n      }, [map]);\r\n\r\n\r\n    //지도에 약국들 출력\r\n    useEffect(() => {\r\n\r\n        if(lat && lng) {\r\n            async function getShops() {\r\n                try {\r\n                    //화면 지도 반경만큼 약국 다 보여주기\r\n                    return await axios.get(`https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat=${lat}&lng=${lng}&m=1000`)\r\n    \r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n                \r\n            }\r\n    \r\n            async function printShops() {\r\n                    if(lat && lng) {\r\n                        const shops = await getShops();\r\n                        console.log(shops.data);\r\n                    \r\n                        if(shops.data.count) {\r\n    \r\n                            shops.data.stores.forEach((store, i) => {\r\n                                const {created_at, name, remain_stat, stock_at, lat, lng} = shops.data.stores[i];\r\n    \r\n                                // 커스텀 오버레이에 표시할 내용    \r\n                                var content = document.createElement('div');\r\n                                content.classList.add('store-label');\r\n\r\n                                //재고 상태[100개 이상(녹색): 'plenty' / 30개 이상 100개미만(노랑색): 'some' / 2개 이상 30개 미만(빨강색): 'few' / 1개 이하(회색): 'empty' / 판매중지: 'break']\r\n\r\n                                let stockColor = '';\r\n                                let stockText = '';\r\n\r\n                                switch(remain_stat) {\r\n                                    case 'plenty':\r\n                                        stockColor = \"green\";\r\n                                        stockText = \"100개 이상\";\r\n                                      break;\r\n                                    case 'some':\r\n                                        stockColor = \"#ffd800\";\r\n                                        stockText = \"30개~100개\";\r\n                                      break;\r\n                                    case 'few':\r\n                                        stockColor = \"#e00000\";\r\n                                        stockText = \"2개~30개\";\r\n                                      break;\r\n                                    case 'empty':\r\n                                        stockColor = \"#6d6d6d\";\r\n                                        stockText = \"품절\";\r\n                                      break;\r\n                                    case 'break':\r\n                                        stockColor = \"#6d6d6d\";\r\n                                        stockText = \"판매중지\";\r\n                                      break;\r\n                                    default:\r\n                                        stockColor = \"black\";\r\n                                        stockText = \"정보없음\";\r\n                                  }\r\n\r\n                                content.style.backgroundColor = stockColor;\r\n\r\n\r\n                                content.innerHTML = `\r\n                                <div class=\"store-details\">\r\n                                    <div style=\"padding-bottom:3px\"> ${name}</div>\r\n                                    <div class=\"text-long\"> 업데이트: ${created_at}</div>\r\n                                    <div class=\"text-long\"> 입고시간: ${stock_at}</div>\r\n                                </div>\r\n                                <div>\r\n                                ${stockText}\r\n                                </div>\r\n                                `\r\n    \r\n                                var position = new kakao.maps.LatLng(lat,lng);  \r\n    \r\n                                var customOverlay = new kakao.maps.CustomOverlay({\r\n                                    position: position,\r\n                                    content: content   \r\n                                });\r\n\r\n    \r\n                                customOverlay.setMap(map);    \r\n\r\n                                //label detail 2개 커스텀 오버레이 컴포넌트 나누기\r\n                            });\r\n                        }\r\n                    }   \r\n            }\r\n    \r\n            printShops();\r\n\r\n        }\r\n        \r\n    },[map,lat,lng])    \r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n                <div className=\"officialsale-section\">\r\n                    <h1>\r\n                        #공적 마스크 판매\r\n                </h1>\r\n\r\n                    <h3 className=\"officialsale-section-text\">\r\n                        내 주변 공적 마스크 판매처에서 마스크를 구매해보세요!\r\n                </h3>\r\n                </div>\r\n            <div className=\"kakao-map-wrap\">\r\n                <div id=\"kakao-map\">\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default OfficialSale;","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport TimeSale from './components/TimeSale';\nimport RandomSale from './components/RandomSale';\nimport OfficialSale from './components/OfficialSale';\nimport CheerKR from './components/CheerKR';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Route, Link} from 'react-router-dom';\nimport {DataProvider} from './DataContext';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n        <DataProvider>\n            <div id=\"fixed-bar\">\n                <div id=\"fixed-bar-wrap\">\n                    <div id=\"logo-wrap\">\n                        <Link to=\"/corona-mask-market/\" id=\"home-link\">\n                            <img className=\"logo-img\" alt=\"코로나마스크마켓\" src=\"https://image.flaticon.com/icons/png/128/1033/1033165.png\" />\n                            <div className=\"logo-text\">Corona Mask Market</div>\n                        </Link>\n                    </div>\n                    <div id=\"category-wrap\">\n                        <div className=\"category\">\n                            <Link to=\"/corona-mask-market/TimeSale\" className=\"glow\"> Time </Link>\n                        </div>\n                        <div className=\"category\">\n                            <Link to=\"/corona-mask-market/RandomSale\" className=\"glow\"> Random </Link>\n                        </div>\n                        <div className=\"category\">\n                            <Link to=\"/corona-mask-market/OfficialSale\" className=\"glow\"> Official </Link>\n                        </div>\n                        <div className=\"category\">\n                            <Link to=\"/corona-mask-market/CheerKR\" className=\"glow\"> Support </Link>\n                        </div>                \n                    </div>\n                </div>\n            </div>\n            <Route path=\"/corona-mask-market/\" exact={true} component={Home} />\n            <Route path=\"/corona-mask-market/TimeSale\" component={TimeSale} />\n            <Route path=\"/corona-mask-market/RandomSale\" component={RandomSale} />\n            <Route path=\"/corona-mask-market/OfficialSale\" component={OfficialSale} />\n            <Route path=\"/corona-mask-market/CheerKR\" component={CheerKR} />\n\n            <footer className=\"footer\">subin</footer>\n        </DataProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}